import { createSlice } from '@reduxjs/toolkit';

export const CartSlice = createSlice({
  name: 'cart',
  initialState: {
    items: [], // Initialize items as an empty array
  },
  reducers: {
    /**
     * Adds an item to the cart or increments its quantity if it already exists.
     * This reducer directly modifies the state because Redux Toolkit uses Immer internally.
     * @param {object} state - The current Redux state for the cart (a mutable draft provided by Immer).
     * @param {object} action - The action object containing the product payload.
     * Payload should include { name, image, cost }.
     */
    addItem: (state, action) => {
      // Destructure product details from the action payload
      const { name, image, cost } = action.payload;
      // Check if the item already exists in the cart by comparing names
      const existingItem = state.items.find(item => item.name === name);
      if (existingItem) {
        // If item already exists in the cart, simply increase its quantity.
        existingItem.quantity++;
      } else {
        // If the item does not exist, add it to the cart with a quantity of 1.
        // It's good practice to ensure 'cost' is stored in a consistent format (e.g., just the number string)
        // so that parsing it in CartItem.jsx is straightforward.
        state.items.push({ name, image, cost, quantity: 1 });
      }
    },
    /**
     * Removes a specific item from the cart based on its name.
     * This reducer directly modifies the state (Immer handles immutability).
     * @param {object} state - The current Redux state for the cart (mutable draft).
     * @param {object} action - The action object, where payload is the name (string) of the item to remove.
     */
    removeItem: (state, action) => {
      // Filter out the item whose name matches the action payload.
      state.items = state.items.filter(item => item.name !== action.payload);
    },
    /**
     * Updates the quantity of an existing item in the cart.
     * This reducer directly modifies the state (Immer handles immutability).
     * @param {object} state - The current Redux state for the cart (mutable draft).
     * @param {object} action - The action object containing payload { name, quantity }.
     */
    updateQuantity: (state, action) => {
      // Destructure the product name and new quantity from the action payload.
      const { name, quantity } = action.payload;
      // Find the item in the cart that needs its quantity updated.
      const itemToUpdate = state.items.find(item => item.name === name);
      if (itemToUpdate) {
        // If the item is found, update its quantity to the new value.
        itemToUpdate.quantity = quantity;
      }
    },
  },
});

// Export the auto-generated action creators. These are used by components to dispatch actions.
export const { addItem, removeItem, updateQuantity } = CartSlice.actions;

// Export the reducer function generated by createSlice as the default export.
// This reducer will be combined in your Redux store configuration.
export default CartSlice.reducer;
